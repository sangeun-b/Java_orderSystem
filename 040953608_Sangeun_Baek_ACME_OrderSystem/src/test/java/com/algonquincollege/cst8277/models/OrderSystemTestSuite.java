/*****************************************************************c******************o*******v******id********
 * File: OrderSystemTestSuite.java
 * Course materials (20F) CST 8277
 * (Original Author) Mike Norman
 * 
 * (Modified) @author Sangeun Baek 040953608
 */
package com.algonquincollege.cst8277.models;

import static org.junit.jupiter.api.Assertions.*;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsEmptyCollection.empty;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.StringStartsWith.startsWith;
import static org.hamcrest.core.StringStartsWith.startsWithIgnoringCase;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.hamcrest.text.IsEqualIgnoringCase.equalToIgnoringCase;

import java.lang.invoke.MethodHandles;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.algonquincollege.cst8277.TestSuiteBase;
import org.h2.tools.Server;

import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.read.ListAppender;

@TestMethodOrder(MethodOrderer.Alphanumeric.class)
public class OrderSystemTestSuite extends TestSuiteBase {
    private static final Class<?> _thisClaz = MethodHandles.lookup().lookupClass();
    private static final Logger logger = LoggerFactory.getLogger(_thisClaz);

    private static final ch.qos.logback.classic.Logger eclipselinkSqlLogger =
        (ch.qos.logback.classic.Logger)LoggerFactory.getLogger(ECLIPSELINK_LOGGING_SQL);
    
    private static final String CUSTOMER_EMAIL = "baek0007@algonquinlive.com";
        
    private static final String FIND_CUST_BY_EMAIL = "select c from Customer c where c.email = :param1";
    private static final String FIND_CUST_BY_LAST = "select c from Customer c where c.lastName = :param1";
    private static final String FIND_CUST_BY_FIRST = "select c from Customer c where c.firstName = :param1";
    private static final String FIND_CUST_BY_PHONENUMBER = "select c from Customer c where c.phoneNumber =:param1";
    
   
    private static final String SELECT_CUST_FOR_TEST01 =
        "SELECT ID, CREATED, EMAIL, FNAME, LNAME, PHONENUMBER, UPDATED, VERSION, BILLING_ADDR, SHIPPING_ADDR FROM CUSTOMER WHERE (ID = ?)";
    
    public static EntityManagerFactory emf;
    public static Server bridgeServer;

    @BeforeAll
    public static void setUpClass() {
        emf = buildEMF();
        try {
        bridgeServer = Server.createTcpServer("-tcpPort", "54321", "-tcpAllowOthers").start();  
                
        }catch(SQLException e) {
            logger.error("something went wrong building bridge server",e);
        }
    }
    
    @AfterAll
    public static void tearDownClass() {
        if(bridgeServer !=null) {
            bridgeServer.stop();
        }
        if(emf!=null) {
            emf.close();
        }
    }

    // Often you must create then close an EntityManager (em) in each testcase method
    // It is also possible to put the code for that in two simple methods and then use JUnit's
    // @BeforeEach/@AfterEach annotations - invoked once FOR EACH TESTCASE METHOD
    // So ...
    protected EntityManager em;
    @BeforeEach
    public void setupEntityManagerForEachTestcase() {
        em = emf.createEntityManager();
    }
    @AfterEach
    public void tearDownEntityManagerForEachTestcase() {
        em.close();
    }
    
    @Test
    public void test01_no_Customers_at_start() {
        logger.info("first test-case");
        ListAppender<ILoggingEvent> listAppender = attachListAppender(eclipselinkSqlLogger, ECLIPSELINK_LOGGING_SQL);

        CustomerPojo emp1 = em.find(CustomerPojo.class, 1);
        assertThat(emp1, is(nullValue()));

        //Demonstrate that it is possible to build assert's against the SQL generated by EclipseLink JPA
        //using Logback (part of SLF4J) Appender
        detachListAppender(eclipselinkSqlLogger, listAppender);
        List<ILoggingEvent> loggingEvents = listAppender.list;
        assertEquals(1, loggingEvents.size());
        assertThat(loggingEvents.get(0).getMessage(), startsWithIgnoringCase(SELECT_CUST_FOR_TEST01));

    }

    // C-R-U-D - only use EntityManager APIs: em.persist(), em.merge(), em.remove()
    // do NOT use JPQL 'bulk' queries:
    //   em.createQuery("update Customer c set ...) or
    //   em.createQuery("delete from Store s where ...)
    
    
    //39 Test
    
    @Test
    public void test02_new_customer_verify_email() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        CustomerPojo c1 = new CustomerPojo();
        c1.setEmail("AA@algonquin.com");
        c1.setFirstName("AA");
        c1.setLastName("AA");
        c1.setPhoneNumber("111-111-1111");
        em.persist(c1);
        tx.commit();
    
    TypedQuery<CustomerPojo> findStudent = em.createQuery(FIND_CUST_BY_EMAIL, CustomerPojo.class)
                                            .setParameter("param1","AA@algonquin.com");
    CustomerPojo copyOfC1 = findStudent.getSingleResult();
    assertThat(copyOfC1.getEmail(), is("AA@algonquin.com"));
    }
    
    @Test
    public void test03_new_customer_verify_firstName() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        CustomerPojo c1 = new CustomerPojo();
        c1.setEmail("CC@algonquin.com");
        c1.setFirstName("CC");
        c1.setLastName("CCC");
        c1.setPhoneNumber("333-333-3333");
        em.persist(c1);
        tx.commit();
    
        TypedQuery<CustomerPojo> findCustomer = em.createQuery(FIND_CUST_BY_FIRST, CustomerPojo.class)
                .setParameter("param1","CC");
        CustomerPojo copyOfC1 = findCustomer.getSingleResult();
        assertThat(copyOfC1.getFirstName(), is("CC"));
    }    
    @Test
    public void test04_find_how_many_customers() {
        TypedQuery<Long> c1 = em.createQuery("select count(c) from Customer c",Long.class);
        Long numCustomers = c1.getSingleResult();
        assertThat(2l,is(numCustomers));
    }
    
    @Test 
    public void test05_new_customer_with_billingAddress() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        
        CustomerPojo c1 = new CustomerPojo();
        c1.setFirstName("EE");
        c1.setLastName("EEE");
        c1.setEmail("EE@algonquin.com");
        c1.setPhoneNumber("555-555-5555");
        BillingAddressPojo b1 = new BillingAddressPojo();
        b1.setType("BillingAddress");
        b1.setCountry("Canada");
        b1.setCity("Ottawa");
        b1.setPostalCode("123456");
        b1.setState("BC");
        b1.setStreet("My home6");
        b1.setAlsoShipping(true);
        b1.setOwningCustomer(c1);
        c1.setBillingAddress(b1);
       
        em.persist(c1);
        tx.commit();
        
        Long AddressCount = (Long)em.createQuery(
                "select count(c.billingAddress) from Customer c where c.firstName = :param1")
                    .setParameter("param1", "EE")
                .getSingleResult();
            assertEquals(1l, AddressCount.longValue());
    }
    
    @Test 
    public void test06_new_customer_with_billingAddress_shippingAddress() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        
        CustomerPojo c1 = new CustomerPojo();
        c1.setFirstName("FF");
        c1.setLastName("FFF");
        c1.setEmail("FF@algonquin.com");
        c1.setPhoneNumber("666-666-6666");
        BillingAddressPojo b1 = new BillingAddressPojo();
        b1.setCity("Nepean");
        b1.setCountry("Canada");
        b1.setPostalCode("E5E 5E5");
        b1.setState("ON");
        b1.setStreet("Alongquin 5");
        b1.setType("BillingAddress");
        b1.setAlsoShipping(false);
        b1.setOwningCustomer(c1);
        c1.setBillingAddress(b1);
        
        ShippingAddressPojo s1 = new ShippingAddressPojo();
        s1.setCity("Nepean");
        s1.setCountry("Canada");
        s1.setPostalCode("F6F 6F6");
        s1.setState("ON");
        s1.setStreet("Alongquin 6");
        s1.setType("ShippingAddress");
        s1.setOwningCustomer(c1);
        c1.setShippingAddress(s1);
        
     
        em.persist(c1);
        tx.commit();
        
        TypedQuery<CustomerPojo> c2 = em.createQuery("select c from Customer c where c.shippingAddress.type = :param1 and c.billingAddress.type = :param2", CustomerPojo.class);
        c2.setParameter("param1","ShippingAddress");
        c2.setParameter("param2", "BillingAddress");
        CustomerPojo copyOfCust1 = c2.getSingleResult();
        assertThat(copyOfCust1.getFirstName(),is(equalToIgnoringCase("FF"))); 
        
      
        
    
    }    
    @Test
    public void test07_find_customer_with_shippingAddress() {

        TypedQuery<CustomerPojo> c1 = em.createQuery(
            "select c from Customer c where c.shippingAddress is not null", CustomerPojo.class);
        List<CustomerPojo> shipping = c1.getResultList();
        assertThat(shipping , is(not(empty())));
        assertThat(shipping , hasSize(1));
        CustomerPojo custshipping = shipping.get(0);
        assertThat(custshipping.getFirstName(), is(equalToIgnoringCase("FF")));
    }
   
    @Test
    public void test08_set_customer_order() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        
        TypedQuery<CustomerPojo> findCustomer = em.createQuery(FIND_CUST_BY_FIRST,CustomerPojo.class)
               .setParameter("param1","EE"); 
        CustomerPojo cust = findCustomer.getSingleResult();
        OrderPojo order = new OrderPojo();
        order.setDescription("first");
        order.setOwningCustomer(cust);
        List<OrderPojo> order2 = new ArrayList<>();
        order2.add(order);
        cust.setOrders(order2);
        em.merge(cust);
        tx.commit();
        
        Long orderCount = (Long)em.createQuery("select count(c.orders) from Customer c where c.firstName = :param1")
                .setParameter("param1","EE").getSingleResult();
        
        assertEquals(1l,orderCount.longValue());
     
    }
    @Test
    public void test09_set_customer_orders() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        
        TypedQuery<CustomerPojo> findCustomer = em.createQuery(FIND_CUST_BY_FIRST,CustomerPojo.class)
               .setParameter("param1","AA"); 
        CustomerPojo cust = findCustomer.getSingleResult();
        OrderPojo order = new OrderPojo();
        order.setDescription("zero");
        order.setOwningCustomer(cust);
        OrderPojo order2 = new OrderPojo();
        order2.setDescription("second");
        order2.setOwningCustomer(cust);
        List<OrderPojo> order3 = new ArrayList<>();
        order3.add(order);
        order3.add(order2);
        cust.setOrders(order3);
        em.merge(cust);
        tx.commit();
       
        Long orderCount = (Long)em.createQuery("select count(c.orders) from Customer c where c.firstName = :param1")
                .setParameter("param1","AA").getSingleResult();
        assertEquals(2l,orderCount.longValue());  
    }
       
    @Test
    public void test10_set_customer_Address() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        
        TypedQuery<CustomerPojo> findCust = em.createQuery(FIND_CUST_BY_FIRST,CustomerPojo.class)
                .setParameter("param1","AA");
        CustomerPojo cust = findCust.getSingleResult();
        BillingAddressPojo b1 = new BillingAddressPojo();
        b1.setCountry("Canada");
        b1.setCity("Nepean");
        b1.setPostalCode("B2B 2B2");
        b1.setState("ON");
        b1.setStreet("Algonquin 2");
        b1.setType("BillingAddress");
        b1.setOwningCustomer(cust);
        b1.setAlsoShipping(true);
        cust.setBillingAddress(b1);
        em.merge(cust);
        tx.commit();
        
        TypedQuery<CustomerPojo> c2 = em.createQuery("select c from Customer c where c.billingAddress.postalCode = :param1", CustomerPojo.class)
                .setParameter("param1", "B2B 2B2");
        CustomerPojo copyOfCust1 = c2.getSingleResult();
        assertThat(copyOfCust1.getFirstName(),is(equalToIgnoringCase("AA")));     
    }
    
    @Test
    public void test11_set_both_addresses() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        
        TypedQuery<CustomerPojo> findCust = em.createQuery(FIND_CUST_BY_FIRST,CustomerPojo.class)
                .setParameter("param1","CC");
        CustomerPojo cust = findCust.getSingleResult();
        BillingAddressPojo b1 = new BillingAddressPojo();
        b1.setCountry("Canada");
        b1.setCity("Nepean");
        b1.setPostalCode("C3C 3C3");
        b1.setState("ON");
        b1.setStreet("Algonquin 3");
        b1.setType("BillingAddress");
        b1.setOwningCustomer(cust);
        b1.setAlsoShipping(false);
        ShippingAddressPojo s1 = new ShippingAddressPojo();
        s1.setCountry("Canada");
        s1.setCity("Nepean");
        s1.setPostalCode("D4D 4D4");
        s1.setState("ON");
        s1.setStreet("Algonquin 4");
        s1.setType("ShippingAddress");
        s1.setOwningCustomer(cust);
        cust.setBillingAddress(b1);
        cust.setShippingAddress(s1);
        em.merge(cust);
        tx.commit();
        
        Long AddressCount = (Long)em.createQuery(
                "select count(c.shippingAddress) from Customer c where c.firstName = :param1")
                    .setParameter("param1", "CC")
                .getSingleResult();
            assertEquals(1l, AddressCount.longValue());
    }
    
    @Test 
    public void test12_find_how_many_customer_has_billingAddress() {
        TypedQuery<Long> c1 = em.createQuery("select count(c) from Customer c where c.billingAddress is not null",Long.class);
        Long numCustomers = c1.getSingleResult();
        assertThat(4l,is(numCustomers));
    }
    @Test
    public void test13_find_how_many_customer_has_shippingAddress() {
        TypedQuery<Long> c1 = em.createQuery("select count(c) from Customer c where c.shippingAddress is not null",Long.class);
        Long numCustomers = c1.getSingleResult();
        assertThat(2l,is(numCustomers));
    }
    @Test
    public void test14_find_how_many_customer_has_both_address() {
        TypedQuery<Long> c1 = em.createQuery("select count(c) from Customer c where c.shippingAddress.type = :param1 and c.billingAddress.type = :param2", Long.class);
        c1.setParameter("param1","ShippingAddress");
        c1.setParameter("param2", "BillingAddress");
        Long numCustomers = c1.getSingleResult();
        assertThat(2l,is(numCustomers));
    }
    @Test 
    public void test15_find_how_many_order_is_existed() {
        TypedQuery<Long> o1 = em.createQuery("select count(ot) from order ot where ot.owningCustomer is not null",Long.class);
        Long numOrders = o1.getSingleResult();
        assertThat(3l,is(numOrders));
        
    }
    @Test
    public void test16_new_order_with_customer() {
        
    EntityTransaction tx = em.getTransaction();
    tx.begin();
    OrderPojo o1 = new OrderPojo();
    o1.setDescription("food");
    CustomerPojo c1 = new CustomerPojo();
    c1.setFirstName("ZZ");
    c1.setLastName("ZZZ");
    c1.setEmail("ZZ@algonquin.com");
    c1.setPhoneNumber("000-000-0000");
    BillingAddressPojo b1 = new BillingAddressPojo();
    b1.setAlsoShipping(true);
    b1.setType("Billing");
    b1.setCity("Edmonton");
    b1.setCountry("Canada");
    b1.setPostalCode("S4S 4S4");
    b1.setState("AB");
    b1.setStreet("home sweet home");
    c1.setBillingAddress(b1);
    b1.setOwningCustomer(c1);
    o1.setOwningCustomer(c1);
    em.persist(c1);
    em.persist(o1);
    tx.commit();

    TypedQuery<Long> findOrder = em.createQuery("select count(ot) from order ot where ot.description = :param1",Long.class)
            .setParameter("param1", "food");
    Long numOrder = findOrder.getSingleResult();
    assertThat(1l, is(numOrder));
    }
    @Test
    public void test17_set_order_orderLine() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        
        TypedQuery<OrderPojo> findOrder = em.createQuery("select ot from order ot where ot.description= :param1",OrderPojo.class)
               .setParameter("param1","first"); 
        OrderPojo order = findOrder.getSingleResult();
        OrderLinePojo orderLine = new OrderLinePojo();
        orderLine.setAmount(100.00);
        orderLine.setPrice(50.00);
        orderLine.setOwningOrder(order);
        OrderLinePk pk = new OrderLinePk();
        pk.setOrderLineNo(1);
        pk.setOwningOrderId(1);
        orderLine.setPk(pk);
        List<OrderLinePojo> orderLine2 = new ArrayList<>();
        orderLine2.add(orderLine);
        order.setOrderLines(orderLine2);
        em.persist(orderLine);
        em.merge(order);
        tx.commit();
        
        TypedQuery<OrderLinePojo> ol2 = em.createQuery("select ol from OrderLine ol where ol.amount = :param1", OrderLinePojo.class)
                .setParameter("param1", 100.00);
        OrderLinePojo copyOfOrderLine1 = ol2.getSingleResult();
        assertThat(copyOfOrderLine1.getPrice(),is(50.00));    
       
    }
    @Test
    public void test18_set_orderLine_Product(){
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        
        TypedQuery<OrderPojo> findOrder = em.createQuery("select ot from order ot where ot.description= :param1",OrderPojo.class)
               .setParameter("param1","food");
        OrderPojo order = findOrder.getSingleResult();
        OrderLinePojo orderLine = new OrderLinePojo();
        orderLine.setAmount(400.00);
        orderLine.setPrice(200.00);
        orderLine.setOwningOrder(order);
        OrderLinePk pk = new OrderLinePk();
        pk.setOrderLineNo(2);
        pk.setOwningOrderId(order.getId());
        orderLine.setPk(pk);
        List<OrderLinePojo> orderLine2 = new ArrayList<>();
        orderLine2.add(orderLine);
        order.setOrderLines(orderLine2);
        ProductPojo p1 = new ProductPojo();
        p1.setDescription("chocolate");
        p1.setSerialNo("7070707070");
        orderLine.setProduct(p1);
        em.persist(orderLine);
        em.merge(order);
        tx.commit();
        
        TypedQuery<ProductPojo> p3 = em.createQuery("select p from Product p where p.description = :param1", ProductPojo.class)
                .setParameter("param1", "chocolate");
        ProductPojo copyOfProduct = p3.getSingleResult();
        assertThat(copyOfProduct.getSerialNo(),is("7070707070"));
    }
    
   
    @Test
    public void test19_find_customer_by_phoneNumber() {
        TypedQuery<CustomerPojo> findCustomer = em.createQuery(FIND_CUST_BY_PHONENUMBER, CustomerPojo.class)
                .setParameter("param1","333-333-3333");
        CustomerPojo copyOfC1 = findCustomer.getSingleResult();
        assertThat(copyOfC1.getFirstName(), is("CC"));
    }
    @Test
    public void test20_find_orderLine_by_highst_Amount() {
        TypedQuery<OrderLinePojo> ol1 = em.createQuery( "select ol from OrderLine ol where ol.amount = (select max(ol2.amount) from OrderLine ol2)",OrderLinePojo.class);
        OrderLinePojo highstAmount = ol1.getSingleResult();
            assertThat(highstAmount, is(not(nullValue())));
            assertThat(highstAmount.getPrice(), is(200.00));
    }
    @Test
    public void test21_find_orderLine_by_highst_price() {
        TypedQuery<OrderLinePojo> ol1 = em.createQuery( "select ol from OrderLine ol where ol.price = (select max(ol2.price) from OrderLine ol2)",OrderLinePojo.class);
        OrderLinePojo highstPrice = ol1.getSingleResult();
            assertThat(highstPrice, is(not(nullValue())));
            assertThat(highstPrice.getAmount(), is(400.00));
    }
    @Test
    public void test22_find_orderLine_by_lowest_Amount() {
        TypedQuery<OrderLinePojo> ol1 = em.createQuery( "select ol from OrderLine ol where ol.amount = (select min(ol2.amount) from OrderLine ol2)",OrderLinePojo.class);
        OrderLinePojo lowestAmount = ol1.getSingleResult();
            assertThat(lowestAmount, is(not(nullValue())));
            assertThat(lowestAmount.getPrice(), is(50.00));
    }
    public void test23_find_orderLine_by_lowset_price() {
        TypedQuery<OrderLinePojo> q1 = em.createQuery( "select ol from OrderLine ol where ol.price = (select min(ol2.price) from OrderLine ol2)",OrderLinePojo.class);
        OrderLinePojo lowestPrice = q1.getSingleResult();
            assertThat(lowestPrice, is(not(nullValue())));
            assertThat(lowestPrice.getAmount(), is(100.00));
    }
    @Test
    public void test23_set_product() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        
        TypedQuery<OrderLinePojo> findOL = em.createQuery("select ol from OrderLine ol where ol.amount= :param1",OrderLinePojo.class)
                .setParameter("param1",100.00);
        OrderLinePojo orderLine1 = findOL.getSingleResult();
        ProductPojo product1 = new ProductPojo();
        product1.setDescription("product1");
        product1.setSerialNo("a1b2c3");
        orderLine1.setProduct(product1);
        em.merge(orderLine1);
        tx.commit();
        
        TypedQuery<ProductPojo> p1 = em.createQuery("select p from Product p where p.description = :param1", ProductPojo.class)
                .setParameter("param1", "product1");
        ProductPojo copyOfProduct1 = p1.getSingleResult();
        assertThat(copyOfProduct1.getSerialNo(),is(equalToIgnoringCase("a1b2c3")));  
        
    }
    @Test
    public void test24_new_product() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        ProductPojo p1 = new ProductPojo();
        p1.setDescription("ice cream");
        p1.setSerialNo("xoxo");
     
        em.persist(p1);
        tx.commit();

        TypedQuery<ProductPojo> findProduct = em.createQuery("select p from Product p where p.description = :param1",ProductPojo.class)
                .setParameter("param1", "ice cream");
        ProductPojo copyOfProducts = findProduct.getSingleResult();
        assertThat(copyOfProducts.getSerialNo(), is(equalToIgnoringCase("xoxo")));  
     
    }
    @Test
    public void test25_find_how_many_products() {
        TypedQuery<Long> p1 = em.createQuery("select count(p) from Product p where p.serialNo is not null",Long.class);
        Long numProducts = p1.getSingleResult();
        assertThat(3l,is(numProducts));
    }
   
    
    @Test
    public void test26_new_Store() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        StorePojo s1 = new StorePojo();
        s1.setStoreName("Hello");
        ProductPojo p1 = new ProductPojo();
        p1.setDescription("chip");
        p1.setSerialNo("777777");
        Set<ProductPojo> p2 = new HashSet();
        p2.add(p1);
        s1.setProducts(p2);
        em.persist(p1);
        em.persist(s1);
        tx.commit();

        TypedQuery<Long> findStore = em.createQuery("select count(s) from Store s where s.storeName = :param1",Long.class)
                .setParameter("param1", "Hello");
        Long numStore = findStore.getSingleResult();
        assertThat(1l,is(numStore));
    }
      
    @Test
    public void test27_find_how_many_stores() {
        TypedQuery<Long> findStore = em.createQuery("select count(s) from Store s where s.storeName is not null",Long.class);
        Long numStore = findStore.getSingleResult();
        assertThat(1l,is(numStore));
    }
  
    
    @Test
    public void test28_find_customer_CriteriBuilder_firstNameA() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<CustomerPojo> c1 = cb.createQuery(CustomerPojo.class);
        Root<CustomerPojo> root = c1.from(CustomerPojo.class);
        c1.where(cb.like(cb.upper(root.get(CustomerPojo_.firstName)),cb.parameter(String.class, "firstName")));
        TypedQuery<CustomerPojo> tq = em.createQuery(c1).setParameter("firstName", "A%");
        CustomerPojo customer_firstNameN = tq.getSingleResult();
        assertThat(customer_firstNameN, is(not(nullValue())));
        assertThat(customer_firstNameN.getFirstName(), is(equalToIgnoringCase("AA")));
    }
    @Test
    public void test29_find_Address_CriteriBuilder_PostalCodeB() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AddressPojo> c1 = cb.createQuery(AddressPojo.class);
        Root<AddressPojo> root = c1.from(AddressPojo.class);
        c1.where(cb.like(cb.upper(root.get(AddressPojo_.postalCode)),cb.parameter(String.class, "postalCode")));
        TypedQuery<AddressPojo> tq = em.createQuery(c1).setParameter("postalCode", "B%");
        AddressPojo address_postalCodeB = tq.getSingleResult();
        assertThat(address_postalCodeB, is(not(nullValue())));
        assertThat(address_postalCodeB.getPostalCode(), is(equalToIgnoringCase("B2B 2B2")));
    }
    
    @Test
    public void test30_find_order_CriteriBuilder_DescriptionS() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<OrderPojo> c1 = cb.createQuery(OrderPojo.class);
        Root<OrderPojo> root = c1.from(OrderPojo.class);
        c1.where(cb.like(cb.upper(root.get(OrderPojo_.description)),cb.parameter(String.class, "description")));
        TypedQuery<OrderPojo> tq = em.createQuery(c1).setParameter("description", "S%");
        OrderPojo order_descriptionS = tq.getSingleResult();
        assertThat(order_descriptionS, is(not(nullValue())));
        assertThat(order_descriptionS.getDescription(), is(equalToIgnoringCase("second")));
    }
    @Test
    public void test31_find_orderLine_CriteriBuilder_Amount100() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<OrderLinePojo> ol1 = cb.createQuery(OrderLinePojo.class);
        Root<OrderLinePojo> root = ol1.from(OrderLinePojo.class);
        ol1.where(cb.equal(cb.toDouble(root.get(OrderLinePojo_.amount)),cb.parameter(Double.class, "amount")));
        TypedQuery<OrderLinePojo> tq = em.createQuery(ol1).setParameter("amount", 100.00);
        OrderLinePojo orderLine_amount100 = tq.getSingleResult();
        assertThat(orderLine_amount100, is(not(nullValue())));
        assertThat(orderLine_amount100.getAmount(), is(100.00));
    }
    @Test
    public void test32_find_orderLine_CriteriBuilder_Amount_higher_than200() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<OrderLinePojo> ol1 = cb.createQuery(OrderLinePojo.class);
        Root<OrderLinePojo> root = ol1.from(OrderLinePojo.class);
        ol1.where(cb.ge(cb.toDouble(root.get(OrderLinePojo_.amount)),cb.parameter(Double.class, "amount")));
        TypedQuery<OrderLinePojo> tq = em.createQuery(ol1).setParameter("amount", 200.00);
        OrderLinePojo orderLine_amount200ge = tq.getSingleResult();
        assertThat(orderLine_amount200ge, is(not(nullValue())));
        assertThat(orderLine_amount200ge.getAmount(), is(400.00));
    }
    @Test
    public void test33_find_orderLine_CriteriBuilder_Price_lower_than100() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<OrderLinePojo> ol1 = cb.createQuery(OrderLinePojo.class);
        Root<OrderLinePojo> root = ol1.from(OrderLinePojo.class);
        ol1.where(cb.le(cb.toDouble(root.get(OrderLinePojo_.price)),cb.parameter(Double.class, "price")));
        TypedQuery<OrderLinePojo> tq = em.createQuery(ol1).setParameter("price", 100.00);
        OrderLinePojo orderLine_price100le = tq.getSingleResult();
        assertThat(orderLine_price100le, is(not(nullValue())));
        assertThat(orderLine_price100le.getPrice(), is(50.00));
    }
    @Test
    public void test34_find_product_CriteriBuilder_Description_i() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<ProductPojo> p1 = cb.createQuery(ProductPojo.class);
        Root<ProductPojo> root = p1.from(ProductPojo.class);
        p1.where(cb.like(cb.lower(root.get(ProductPojo_.description)),cb.parameter(String.class, "description")));
        TypedQuery<ProductPojo> tq = em.createQuery(p1).setParameter("description", "i%");
        ProductPojo product_descriptioni = tq.getSingleResult();
        assertThat(product_descriptioni, is(not(nullValue())));
        assertThat(product_descriptioni.getDescription(), is(equalToIgnoringCase("ice cream")));
    }
    @Test
    public void test35_find_store_CriteriBuilder_StoreNameH() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<StorePojo> s1 = cb.createQuery(StorePojo.class);
        Root<StorePojo> root = s1.from(StorePojo.class);
        s1.where(cb.like(cb.upper(root.get(StorePojo_.storeName)),cb.parameter(String.class, "storeName")));
        TypedQuery<StorePojo> tq = em.createQuery(s1).setParameter("storeName", "H%");
        StorePojo store_storeNameH = tq.getSingleResult();
        assertThat(store_storeNameH, is(not(nullValue())));
        assertThat(store_storeNameH.getStoreName(), is(equalToIgnoringCase("Hello")));
    }
    
    
    @Test
    public void test36_delete_customer_by_firstName() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        TypedQuery<CustomerPojo> findC = em.createQuery("select c from Customer c where c.firstName= :param1",CustomerPojo.class)
                .setParameter("param1","AA");
        CustomerPojo c1 = findC.getSingleResult();
        em.remove(c1);
        
        TypedQuery<Long> findCust = em.createQuery("select count(c) from Customer c where c.firstName= :param1",Long.class)
                .setParameter("param1", "AA");
        Long numCust = findCust.getSingleResult();
        assertThat(0l,is(numCust));
    }    
    @Test
    public void test37_delete_Order_by_description() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        TypedQuery<OrderPojo> findO = em.createQuery("select ot from order ot where ot.description= :param1",OrderPojo.class)
                .setParameter("param1","food");
        OrderPojo o1 = findO.getSingleResult();
        em.remove(o1);
        
        TypedQuery<Long> findOrder = em.createQuery("select count(ot) from order ot where ot.description= :param1",Long.class)
                .setParameter("param1", "food");
        Long numOrder = findOrder.getSingleResult();
        assertThat(0l,is(numOrder));
    }
    @Test
    public void test38_delete_OrderLine_by_amount() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        TypedQuery<OrderLinePojo> findOL = em.createQuery("select ol from OrderLine ol where ol.amount= :param1",OrderLinePojo.class)
                .setParameter("param1",100.00);
        OrderLinePojo ol1 = findOL.getSingleResult();
        em.remove(ol1);
        
        TypedQuery<Long> findOrderLine = em.createQuery("select count(ol) from OrderLine ol where ol.amount= :param1",Long.class)
                .setParameter("param1", 100.00);
        Long numOrderLine = findOrderLine.getSingleResult();
        assertThat(0l,is(numOrderLine));
    }
    @Test 
    public void test39_delete_Product_by_description() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        TypedQuery<ProductPojo> findP = em.createQuery("select p from Product p where p.description= :param1",ProductPojo.class)
                .setParameter("param1","ice cream");
        ProductPojo p1 = findP.getSingleResult();
        em.remove(p1);
        
        TypedQuery<Long> findProduct = em.createQuery("select count(p) from Product p where p.description= :param1",Long.class)
                .setParameter("param1", "ice cream");
        Long numProduct = findProduct.getSingleResult();
        assertThat(0l,is(numProduct));
    }
    @Test
    public void test40_delete_Store_by_storeName() {
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        TypedQuery<StorePojo> findS = em.createQuery("select s from Store s where s.storeName = :param1",StorePojo.class)
                .setParameter("param1","Hello");
        StorePojo s1 = findS.getSingleResult();
        
        em.remove(s1);
        TypedQuery<Long> findStore = em.createQuery("select count(s) from Store s where s.storeName = :param1",Long.class)
                .setParameter("param1", "Hello");
        Long numStore = findStore.getSingleResult();
        assertThat(0l,is(numStore));
    }
  
}